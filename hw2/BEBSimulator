import java.util.ArrayList;

public class BEBSimulator {
	private int number_of_nodes;
	private int number_of_time_slots;
	private double probability_node_sendFrame;
	
	
	public void timeSlotLoop(Node[] nodes) {
		Node[] temp = nodes;
		for (int i = 0; i < number_of_time_slots; i++) {
			ArrayList<Integer> senders = new ArrayList<Integer>();
			// Calls sendFrame for each node
			for (int j = 0; j < temp.length; j ++) {
				if (temp[j] != null)
					if (temp[j].sendFrame(probability_node_sendFrame))
						senders.add(j);
			}
			if (senders.isEmpty()) {
				System.out.print("[UNUSED] ");
			}
			else if (senders.size() == 1) {
				temp[senders.get(0)] = null;
				System.out.print("[SEND " + (senders.get(0) + 1) + "] ");
			}
			else {
				String output = "[COLLISON ";
				for (int j = 0; j < senders.size(); j++) {
					temp[senders.get(j)].collision();
					output += (senders.get(j) + 1) + " ";
				}
				output += "] ";
				System.out.print(output);
			}
		}
	}
	
	
	public void simulate(int numNodes, int numTimeSlots, double sendProb) {
		number_of_nodes = numNodes;
		number_of_time_slots = numTimeSlots;
		probability_node_sendFrame = sendProb;
		Node[] nodes = new Node[number_of_nodes];
		for (int i = 0; i < number_of_nodes; i++)
			nodes[i] = new Node();
		// As long as a node needs to send, loop
		timeSlotLoop(nodes);
	}
	
	
	public static void main(String[] args) {
		BEBSimulator test = new BEBSimulator();
		test.simulate(5, 20, 0.5);
	}
}
